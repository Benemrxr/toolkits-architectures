# To get a full overview how to build the compose file see See: https://docs.docker.com/compose/compose-file/

# Specify Compose file version. See: https://docs.docker.com/compose/compose-file/
version: "3.8"

# Configure our Services. The service-names (pyml, postgres, etc.) also represent their hostnames
services:
  pyml:
    build: "./pyml"
    networks: 
      - default
    volumes:
      - mldata:/data # Persisting and sharing the model between the containers
    environment:
      - TF_CPP_MIN_LOG_LEVEL=2 # Disable Tensorflow info and warning messages 

  pyjokes:
    build: "./pyjokes"
    networks: 
      - internal
      - default
    depends_on: 
        - postgres

  pypredict:
    build: "./pypredict"
    networks: 
      - internal
      - default
    volumes:
      - mldata:/data # Persisting and sharing the model between the containers
    depends_on: 
        - postgres
    environment:
      - TF_CPP_MIN_LOG_LEVEL=2 # Disable Tensorflow info and warning messages 

  postgres:
    image: "postgres:12.4"
    networks:
      internal:
        aliases:
          - database # Whatever name the container will get, it will always be reachable under the given aliases.
    volumes:
      - pgdata:/var/lib/postgresql/data # Persisting the database

    environment:
      - POSTGRES_USER=someuser
      - POSTGRES_PASSWORD=somepassword

  pgadmin:
    image: "dpage/pgadmin4:4.28"
    networks: 
      - internal # Internal network for our database. No one outside needs direct access to it (security)
      - default
    environment:
      - PGADMIN_DEFAULT_EMAIL=someuser@somedomain.ch
      - PGADMIN_DEFAULT_PASSWORD=somepassword
    ports: 
        - "16543:80"
    depends_on: 
        - postgres

#Define the networks. Also see: https://docs.docker.com/compose/compose-file/#networks
networks:
  # Internal network for our database. No one outside needs direct access to it (security)
  internal:
    internal: true
    driver: overlay
    

volumes:
  pgdata: # persisting the database
  mldata: # persisting and sharing the model between the containers
